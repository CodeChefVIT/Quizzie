{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\n/* eslint-disable jsx-a11y/aria-role */\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport ButtonBase from '../ButtonBase';\nimport IconButton from '../IconButton';\nimport withStyles from '../styles/withStyles';\nimport ExpansionPanelContext from '../ExpansionPanel/ExpansionPanelContext';\nexport var styles = function styles(theme) {\n  var transition = {\n    duration: theme.transitions.duration.shortest\n  };\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      display: 'flex',\n      minHeight: 8 * 6,\n      transition: theme.transitions.create(['min-height', 'background-color'], transition),\n      padding: theme.spacing(0, 2),\n      '&:hover:not($disabled)': {\n        cursor: 'pointer'\n      },\n      '&$expanded': {\n        minHeight: 64\n      },\n      '&$focused': {\n        backgroundColor: theme.palette.action.focus\n      },\n      '&$disabled': {\n        opacity: theme.palette.action.disabledOpacity\n      }\n    },\n\n    /* Pseudo-class applied to the root element, children wrapper element and `IconButton` component if `expanded={true}`. */\n    expanded: {},\n\n    /* Pseudo-class applied to the root element if `focused={true}`. */\n    focused: {},\n\n    /* Pseudo-class applied to the root element if `disabled={true}`. */\n    disabled: {},\n\n    /* Styles applied to the children wrapper element. */\n    content: {\n      display: 'flex',\n      flexGrow: 1,\n      transition: theme.transitions.create(['margin'], transition),\n      margin: '12px 0',\n      '&$expanded': {\n        margin: '20px 0'\n      }\n    },\n\n    /* Styles applied to the `IconButton` component when `expandIcon` is supplied. */\n    expandIcon: {\n      transform: 'rotate(0deg)',\n      transition: theme.transitions.create('transform', transition),\n      '&:hover': {\n        // Disable the hover effect for the IconButton,\n        // because a hover effect should apply to the entire Expand button and\n        // not only to the IconButton.\n        backgroundColor: 'transparent'\n      },\n      '&$expanded': {\n        transform: 'rotate(180deg)'\n      }\n    }\n  };\n};\nvar ExpansionPanelSummary = React.forwardRef(function ExpansionPanelSummary(props, ref) {\n  var children = props.children,\n      classes = props.classes,\n      className = props.className,\n      expandIcon = props.expandIcon,\n      IconButtonProps = props.IconButtonProps,\n      onBlur = props.onBlur,\n      onClick = props.onClick,\n      onFocusVisible = props.onFocusVisible,\n      other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"expandIcon\", \"IconButtonProps\", \"onBlur\", \"onClick\", \"onFocusVisible\"]);\n\n  var _React$useState = React.useState(false),\n      focusedState = _React$useState[0],\n      setFocusedState = _React$useState[1];\n\n  var handleFocusVisible = function handleFocusVisible(event) {\n    setFocusedState(true);\n\n    if (onFocusVisible) {\n      onFocusVisible(event);\n    }\n  };\n\n  var handleBlur = function handleBlur(event) {\n    setFocusedState(false);\n\n    if (onBlur) {\n      onBlur(event);\n    }\n  };\n\n  var _React$useContext = React.useContext(ExpansionPanelContext),\n      _React$useContext$dis = _React$useContext.disabled,\n      disabled = _React$useContext$dis === void 0 ? false : _React$useContext$dis,\n      expanded = _React$useContext.expanded,\n      toggle = _React$useContext.toggle;\n\n  var handleChange = function handleChange(event) {\n    if (toggle) {\n      toggle(event);\n    }\n\n    if (onClick) {\n      onClick(event);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(ButtonBase, _extends({\n    focusRipple: false,\n    disableRipple: true,\n    disabled: disabled,\n    component: \"div\",\n    \"aria-expanded\": expanded,\n    className: clsx(classes.root, className, disabled && classes.disabled, expanded && classes.expanded, focusedState && classes.focused),\n    onFocusVisible: handleFocusVisible,\n    onBlur: handleBlur,\n    onClick: handleChange,\n    ref: ref\n  }, other), /*#__PURE__*/React.createElement(\"div\", {\n    className: clsx(classes.content, expanded && classes.expanded)\n  }, children), expandIcon && /*#__PURE__*/React.createElement(IconButton, _extends({\n    className: clsx(classes.expandIcon, expanded && classes.expanded),\n    edge: \"end\",\n    component: \"div\",\n    tabIndex: null,\n    role: null,\n    \"aria-hidden\": true\n  }, IconButtonProps), expandIcon));\n});\nprocess.env.NODE_ENV !== \"production\" ? ExpansionPanelSummary.propTypes = {\n  /**\n   * The content of the expansion panel summary.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The icon to display as the expand indicator.\n   */\n  expandIcon: PropTypes.node,\n\n  /**\n   * Props applied to the `IconButton` element wrapping the expand icon.\n   */\n  IconButtonProps: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  onBlur: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onClick: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onFocusVisible: PropTypes.func\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiExpansionPanelSummary'\n})(ExpansionPanelSummary);","map":{"version":3,"sources":["/Users/mac/Documents/Projects/Scholastic-Quiz/node_modules/@material-ui/core/esm/ExpansionPanelSummary/ExpansionPanelSummary.js"],"names":["_extends","_objectWithoutProperties","React","PropTypes","clsx","ButtonBase","IconButton","withStyles","ExpansionPanelContext","styles","theme","transition","duration","transitions","shortest","root","display","minHeight","create","padding","spacing","cursor","backgroundColor","palette","action","focus","opacity","disabledOpacity","expanded","focused","disabled","content","flexGrow","margin","expandIcon","transform","ExpansionPanelSummary","forwardRef","props","ref","children","classes","className","IconButtonProps","onBlur","onClick","onFocusVisible","other","_React$useState","useState","focusedState","setFocusedState","handleFocusVisible","event","handleBlur","_React$useContext","useContext","_React$useContext$dis","toggle","handleChange","createElement","focusRipple","disableRipple","component","edge","tabIndex","role","process","env","NODE_ENV","propTypes","node","object","isRequired","string","func","name"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\n\n/* eslint-disable jsx-a11y/aria-role */\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport ButtonBase from '../ButtonBase';\nimport IconButton from '../IconButton';\nimport withStyles from '../styles/withStyles';\nimport ExpansionPanelContext from '../ExpansionPanel/ExpansionPanelContext';\nexport var styles = function styles(theme) {\n  var transition = {\n    duration: theme.transitions.duration.shortest\n  };\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      display: 'flex',\n      minHeight: 8 * 6,\n      transition: theme.transitions.create(['min-height', 'background-color'], transition),\n      padding: theme.spacing(0, 2),\n      '&:hover:not($disabled)': {\n        cursor: 'pointer'\n      },\n      '&$expanded': {\n        minHeight: 64\n      },\n      '&$focused': {\n        backgroundColor: theme.palette.action.focus\n      },\n      '&$disabled': {\n        opacity: theme.palette.action.disabledOpacity\n      }\n    },\n\n    /* Pseudo-class applied to the root element, children wrapper element and `IconButton` component if `expanded={true}`. */\n    expanded: {},\n\n    /* Pseudo-class applied to the root element if `focused={true}`. */\n    focused: {},\n\n    /* Pseudo-class applied to the root element if `disabled={true}`. */\n    disabled: {},\n\n    /* Styles applied to the children wrapper element. */\n    content: {\n      display: 'flex',\n      flexGrow: 1,\n      transition: theme.transitions.create(['margin'], transition),\n      margin: '12px 0',\n      '&$expanded': {\n        margin: '20px 0'\n      }\n    },\n\n    /* Styles applied to the `IconButton` component when `expandIcon` is supplied. */\n    expandIcon: {\n      transform: 'rotate(0deg)',\n      transition: theme.transitions.create('transform', transition),\n      '&:hover': {\n        // Disable the hover effect for the IconButton,\n        // because a hover effect should apply to the entire Expand button and\n        // not only to the IconButton.\n        backgroundColor: 'transparent'\n      },\n      '&$expanded': {\n        transform: 'rotate(180deg)'\n      }\n    }\n  };\n};\nvar ExpansionPanelSummary = React.forwardRef(function ExpansionPanelSummary(props, ref) {\n  var children = props.children,\n      classes = props.classes,\n      className = props.className,\n      expandIcon = props.expandIcon,\n      IconButtonProps = props.IconButtonProps,\n      onBlur = props.onBlur,\n      onClick = props.onClick,\n      onFocusVisible = props.onFocusVisible,\n      other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"expandIcon\", \"IconButtonProps\", \"onBlur\", \"onClick\", \"onFocusVisible\"]);\n\n  var _React$useState = React.useState(false),\n      focusedState = _React$useState[0],\n      setFocusedState = _React$useState[1];\n\n  var handleFocusVisible = function handleFocusVisible(event) {\n    setFocusedState(true);\n\n    if (onFocusVisible) {\n      onFocusVisible(event);\n    }\n  };\n\n  var handleBlur = function handleBlur(event) {\n    setFocusedState(false);\n\n    if (onBlur) {\n      onBlur(event);\n    }\n  };\n\n  var _React$useContext = React.useContext(ExpansionPanelContext),\n      _React$useContext$dis = _React$useContext.disabled,\n      disabled = _React$useContext$dis === void 0 ? false : _React$useContext$dis,\n      expanded = _React$useContext.expanded,\n      toggle = _React$useContext.toggle;\n\n  var handleChange = function handleChange(event) {\n    if (toggle) {\n      toggle(event);\n    }\n\n    if (onClick) {\n      onClick(event);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(ButtonBase, _extends({\n    focusRipple: false,\n    disableRipple: true,\n    disabled: disabled,\n    component: \"div\",\n    \"aria-expanded\": expanded,\n    className: clsx(classes.root, className, disabled && classes.disabled, expanded && classes.expanded, focusedState && classes.focused),\n    onFocusVisible: handleFocusVisible,\n    onBlur: handleBlur,\n    onClick: handleChange,\n    ref: ref\n  }, other), /*#__PURE__*/React.createElement(\"div\", {\n    className: clsx(classes.content, expanded && classes.expanded)\n  }, children), expandIcon && /*#__PURE__*/React.createElement(IconButton, _extends({\n    className: clsx(classes.expandIcon, expanded && classes.expanded),\n    edge: \"end\",\n    component: \"div\",\n    tabIndex: null,\n    role: null,\n    \"aria-hidden\": true\n  }, IconButtonProps), expandIcon));\n});\nprocess.env.NODE_ENV !== \"production\" ? ExpansionPanelSummary.propTypes = {\n  /**\n   * The content of the expansion panel summary.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The icon to display as the expand indicator.\n   */\n  expandIcon: PropTypes.node,\n\n  /**\n   * Props applied to the `IconButton` element wrapping the expand icon.\n   */\n  IconButtonProps: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  onBlur: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onClick: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onFocusVisible: PropTypes.func\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiExpansionPanelSummary'\n})(ExpansionPanelSummary);"]},"metadata":{},"sourceType":"module"}