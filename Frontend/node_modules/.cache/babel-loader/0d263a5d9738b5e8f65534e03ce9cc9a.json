{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport 'react';\nimport 'prop-types';\nimport { u as useUtils } from './useUtils-cfb96ac9.js';\nimport 'clsx';\nimport '@babel/runtime/helpers/esm/extends';\nimport '@babel/runtime/helpers/esm/objectWithoutProperties';\nimport '@material-ui/core/Typography';\nimport '@material-ui/core/styles';\nimport { m as makePickerWithState, a as PureDateInput, u as usePickerState, K as KeyboardDateInput, b as useKeyboardPickerState, p as pick12hOr24hFormat } from './makePickerWithState-5a79cb8a.js';\nimport '@material-ui/core/Button';\nimport '@material-ui/core/Toolbar';\nimport './Wrapper-241966d7.js';\nimport './Calendar-11ae61f6.js';\nimport '@material-ui/core/TextField';\nimport '@material-ui/core/IconButton';\nimport '@material-ui/core/InputAdornment';\nimport 'rifm';\nimport '@material-ui/core/SvgIcon';\nimport '@babel/runtime/helpers/esm/slicedToArray';\nimport { t as timePickerDefaultProps } from './Picker-ccd9ba90.js';\nimport '@babel/runtime/helpers/esm/classCallCheck';\nimport '@babel/runtime/helpers/esm/createClass';\nimport '@babel/runtime/helpers/esm/possibleConstructorReturn';\nimport '@babel/runtime/helpers/esm/getPrototypeOf';\nimport '@babel/runtime/helpers/esm/inherits';\nimport './Day.js';\nimport 'react-transition-group';\nimport '@material-ui/core/CircularProgress';\nimport '@material-ui/core/DialogActions';\nimport '@material-ui/core/DialogContent';\nimport '@material-ui/core/Dialog';\nimport '@material-ui/core/Popover';\nimport './Clock-48fde975.js';\nimport './ClockView.js';\nimport { T as TimePickerToolbar } from './TimePickerToolbar-81100fab.js';\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(source, true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(source).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nvar defaultProps = _objectSpread({}, timePickerDefaultProps, {\n  openTo: 'hours',\n  views: ['hours', 'minutes']\n});\n\nfunction useOptions(props) {\n  var utils = useUtils();\n  return {\n    getDefaultFormat: function getDefaultFormat() {\n      return pick12hOr24hFormat(props.format, props.ampm, {\n        '12h': utils.time12hFormat,\n        '24h': utils.time24hFormat\n      });\n    }\n  };\n}\n\nvar TimePicker = makePickerWithState({\n  useOptions: useOptions,\n  Input: PureDateInput,\n  useState: usePickerState,\n  DefaultToolbarComponent: TimePickerToolbar\n});\nvar KeyboardTimePicker = makePickerWithState({\n  useOptions: useOptions,\n  Input: KeyboardDateInput,\n  useState: useKeyboardPickerState,\n  DefaultToolbarComponent: TimePickerToolbar,\n  getCustomProps: function getCustomProps(props) {\n    return {\n      refuse: props.ampm ? /[^\\dap]+/gi : /[^\\d]+/gi\n    };\n  }\n});\nTimePicker.defaultProps = defaultProps;\nKeyboardTimePicker.defaultProps = defaultProps;\nexport { KeyboardTimePicker, TimePicker };","map":{"version":3,"sources":["../../src/TimePicker/TimePicker.tsx"],"names":["defaultProps","openTo","views","utils","useUtils","getDefaultFormat","pick12hOr24hFormat","props","time24hFormat","TimePicker","makePickerWithState","useOptions","Input","useState","DefaultToolbarComponent","TimePickerToolbar","KeyboardTimePicker","getCustomProps","refuse"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwCA,IAAMA,YAAY,GAAA,aAAA,CAAA,EAAA,EAAA,sBAAA,EAAA;AAEhBC,EAAAA,MAAM,EAFU,OAAA;AAGhBC,EAAAA,KAAK,EAAE,CAAA,OAAA,EAAA,SAAA;AAHS,CAAA,CAAlB;;AAMA,SAAA,UAAA,CAAA,KAAA,EAAsE;MAC9DC,KAAK,GAAGC,QAAd,E;SAEO;AACLC,IAAAA,gBAAgB,EAAE,SAAA,gBAAA,GAAA;aAChBC,kBAAkB,CAACC,KAAK,CAAN,MAAA,EAAeA,KAAK,CAApB,IAAA,EAA2B;eACpCJ,KAAK,CAD+B,aAAA;eAEpCA,KAAK,CAACK;AAF8B,OAA3B,C;;AAFf,G;;;AAST,IAAaC,UAAU,GAAGC,mBAAmB,CAAkB;AAC7DC,EAAAA,UAAU,EADmD,UAAA;AAE7DC,EAAAA,KAAK,EAFwD,aAAA;AAG7DC,EAAAA,QAAQ,EAHqD,cAAA;AAI7DC,EAAAA,uBAAuB,EAAEC;AAJoC,CAAlB,CAA7C;AAOA,IAAaC,kBAAkB,GAAGN,mBAAmB,CAA0B;AAC7EC,EAAAA,UAAU,EADmE,UAAA;AAE7EC,EAAAA,KAAK,EAFwE,iBAAA;AAG7EC,EAAAA,QAAQ,EAHqE,sBAAA;AAI7EC,EAAAA,uBAAuB,EAJsD,iBAAA;AAK7EG,EAAAA,cAAc,EAAE,SAAA,cAAA,CAAA,KAAA,EAAK;WAAK;AACxBC,MAAAA,MAAM,EAAEX,KAAK,CAALA,IAAAA,GAAAA,YAAAA,GAA4B;AADZ,K;;AALmD,CAA1B,CAArD;AAUAE,UAAU,CAAVA,YAAAA,GAAAA,YAAAA;AAEAO,kBAAkB,CAAlBA,YAAAA,GAAAA,YAAAA","sourcesContent":["import { useUtils } from '../_shared/hooks/useUtils';\nimport { TimePickerToolbar } from './TimePickerToolbar';\nimport { PureDateInput } from '../_shared/PureDateInput';\nimport { KeyboardDateInput } from '../_shared/KeyboardDateInput';\nimport { timePickerDefaultProps } from '../constants/prop-types';\nimport { usePickerState } from '../_shared/hooks/usePickerState';\nimport { pick12hOr24hFormat } from '../_helpers/text-field-helper';\nimport { useKeyboardPickerState } from '../_shared/hooks/useKeyboardPickerState';\nimport {\n  WithKeyboardInputProps,\n  makePickerWithState,\n  WithPureInputProps,\n} from '../Picker/makePickerWithState';\n\ntype TimePickerView = 'hours' | 'minutes' | 'seconds';\n\nexport interface BaseTimePickerProps {\n  /**\n   * 12h/24h view for hour selection clock\n   * @default true\n   */\n  ampm?: boolean;\n  /**\n   * Step over minutes\n   * @default 1\n   */\n  minutesStep?: number;\n}\n\nexport interface TimePickerViewsProps extends BaseTimePickerProps {\n  /** Array of views to show */\n  views?: ('hours' | 'minutes' | 'seconds')[];\n  /** First view to show in timepicker */\n  openTo?: 'hours' | 'minutes' | 'seconds';\n}\n\nexport type TimePickerProps = WithPureInputProps & TimePickerViewsProps;\n\nexport type KeyboardTimePickerProps = WithKeyboardInputProps & TimePickerViewsProps;\n\nconst defaultProps = {\n  ...timePickerDefaultProps,\n  openTo: 'hours' as TimePickerView,\n  views: ['hours', 'minutes'] as TimePickerView[],\n};\n\nfunction useOptions(props: TimePickerProps | KeyboardTimePickerProps) {\n  const utils = useUtils();\n\n  return {\n    getDefaultFormat: () =>\n      pick12hOr24hFormat(props.format, props.ampm, {\n        '12h': utils.time12hFormat,\n        '24h': utils.time24hFormat,\n      }),\n  };\n}\n\nexport const TimePicker = makePickerWithState<TimePickerProps>({\n  useOptions,\n  Input: PureDateInput,\n  useState: usePickerState,\n  DefaultToolbarComponent: TimePickerToolbar,\n});\n\nexport const KeyboardTimePicker = makePickerWithState<KeyboardTimePickerProps>({\n  useOptions,\n  Input: KeyboardDateInput,\n  useState: useKeyboardPickerState,\n  DefaultToolbarComponent: TimePickerToolbar,\n  getCustomProps: props => ({\n    refuse: props.ampm ? /[^\\dap]+/gi : /[^\\d]+/gi,\n  }),\n});\n\nTimePicker.defaultProps = defaultProps;\n\nKeyboardTimePicker.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}