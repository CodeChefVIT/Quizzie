{"ast":null,"code":"import nested from '../ThemeProvider/nested';\n/**\n * This is the list of the style rule name we use as drop in replacement for the built-in\n * pseudo classes (:checked, :disabled, :focused, etc.).\n *\n * Why do they exist in the first place?\n * These classes are used at a specificity of 2.\n * It allows them to override previously definied styles as well as\n * being untouched by simple user overrides.\n */\n\nvar pseudoClasses = ['checked', 'disabled', 'error', 'focused', 'focusVisible', 'required', 'expanded', 'selected']; // Returns a function which generates unique class names based on counters.\n// When new generator function is created, rule counter is reset.\n// We need to reset the rule counter for SSR for each request.\n//\n// It's inspired by\n// https://github.com/cssinjs/jss/blob/4e6a05dd3f7b6572fdd3ab216861d9e446c20331/src/utils/createGenerateClassName.js\n\nexport default function createGenerateClassName() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var _options$disableGloba = options.disableGlobal,\n      disableGlobal = _options$disableGloba === void 0 ? false : _options$disableGloba,\n      _options$productionPr = options.productionPrefix,\n      productionPrefix = _options$productionPr === void 0 ? 'jss' : _options$productionPr,\n      _options$seed = options.seed,\n      seed = _options$seed === void 0 ? '' : _options$seed;\n  var seedPrefix = seed === '' ? '' : \"\".concat(seed, \"-\");\n  var ruleCounter = 0;\n  return function (rule, styleSheet) {\n    ruleCounter += 1;\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (ruleCounter >= 1e10) {\n        console.warn(['Material-UI: You might have a memory leak.', 'The ruleCounter is not supposed to grow that much.'].join(''));\n      }\n    }\n\n    var name = styleSheet.options.name; // Is a global static MUI style?\n\n    if (name && name.indexOf('Mui') === 0 && !styleSheet.options.link && !disableGlobal) {\n      // We can use a shorthand class name, we never use the keys to style the components.\n      if (pseudoClasses.indexOf(rule.key) !== -1) {\n        return \"Mui-\".concat(rule.key);\n      }\n\n      var prefix = \"\".concat(seedPrefix).concat(name, \"-\").concat(rule.key);\n\n      if (!styleSheet.options.theme[nested] || seed !== '') {\n        return prefix;\n      }\n\n      return \"\".concat(prefix, \"-\").concat(ruleCounter);\n    }\n\n    if (process.env.NODE_ENV === 'production') {\n      return \"\".concat(seedPrefix).concat(productionPrefix).concat(ruleCounter);\n    }\n\n    var suffix = \"\".concat(rule.key, \"-\").concat(ruleCounter); // Help with debuggability.\n\n    if (styleSheet.options.classNamePrefix) {\n      return \"\".concat(seedPrefix).concat(styleSheet.options.classNamePrefix, \"-\").concat(suffix);\n    }\n\n    return \"\".concat(seedPrefix).concat(suffix);\n  };\n}","map":{"version":3,"sources":["/Users/mac/Documents/Projects/Quizzie/Frontend/node_modules/@material-ui/styles/esm/createGenerateClassName/createGenerateClassName.js"],"names":["nested","pseudoClasses","createGenerateClassName","options","arguments","length","undefined","_options$disableGloba","disableGlobal","_options$productionPr","productionPrefix","_options$seed","seed","seedPrefix","concat","ruleCounter","rule","styleSheet","process","env","NODE_ENV","console","warn","join","name","indexOf","link","key","prefix","theme","suffix","classNamePrefix"],"mappings":"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","sourcesContent":["import nested from '../ThemeProvider/nested';\n/**\n * This is the list of the style rule name we use as drop in replacement for the built-in\n * pseudo classes (:checked, :disabled, :focused, etc.).\n *\n * Why do they exist in the first place?\n * These classes are used at a specificity of 2.\n * It allows them to override previously definied styles as well as\n * being untouched by simple user overrides.\n */\n\nvar pseudoClasses = ['checked', 'disabled', 'error', 'focused', 'focusVisible', 'required', 'expanded', 'selected']; // Returns a function which generates unique class names based on counters.\n// When new generator function is created, rule counter is reset.\n// We need to reset the rule counter for SSR for each request.\n//\n// It's inspired by\n// https://github.com/cssinjs/jss/blob/4e6a05dd3f7b6572fdd3ab216861d9e446c20331/src/utils/createGenerateClassName.js\n\nexport default function createGenerateClassName() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var _options$disableGloba = options.disableGlobal,\n      disableGlobal = _options$disableGloba === void 0 ? false : _options$disableGloba,\n      _options$productionPr = options.productionPrefix,\n      productionPrefix = _options$productionPr === void 0 ? 'jss' : _options$productionPr,\n      _options$seed = options.seed,\n      seed = _options$seed === void 0 ? '' : _options$seed;\n  var seedPrefix = seed === '' ? '' : \"\".concat(seed, \"-\");\n  var ruleCounter = 0;\n  return function (rule, styleSheet) {\n    ruleCounter += 1;\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (ruleCounter >= 1e10) {\n        console.warn(['Material-UI: You might have a memory leak.', 'The ruleCounter is not supposed to grow that much.'].join(''));\n      }\n    }\n\n    var name = styleSheet.options.name; // Is a global static MUI style?\n\n    if (name && name.indexOf('Mui') === 0 && !styleSheet.options.link && !disableGlobal) {\n      // We can use a shorthand class name, we never use the keys to style the components.\n      if (pseudoClasses.indexOf(rule.key) !== -1) {\n        return \"Mui-\".concat(rule.key);\n      }\n\n      var prefix = \"\".concat(seedPrefix).concat(name, \"-\").concat(rule.key);\n\n      if (!styleSheet.options.theme[nested] || seed !== '') {\n        return prefix;\n      }\n\n      return \"\".concat(prefix, \"-\").concat(ruleCounter);\n    }\n\n    if (process.env.NODE_ENV === 'production') {\n      return \"\".concat(seedPrefix).concat(productionPrefix).concat(ruleCounter);\n    }\n\n    var suffix = \"\".concat(rule.key, \"-\").concat(ruleCounter); // Help with debuggability.\n\n    if (styleSheet.options.classNamePrefix) {\n      return \"\".concat(seedPrefix).concat(styleSheet.options.classNamePrefix, \"-\").concat(suffix);\n    }\n\n    return \"\".concat(seedPrefix).concat(suffix);\n  };\n}"]},"metadata":{},"sourceType":"module"}